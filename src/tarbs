#!/bin/bash

# Tmpstpdwn's Auto Rice Bootstrapping Script (TARBS)
# by Tmpstpdwn <tmpstpdwn@tuta.io>
# License: GNU GPLv3

### VARIABLES ###

dotfilesrepo="https://github.com/tmpstpdwn/.dotfiles.git"
packages="$HOME/.packages"
logfile="$HOME/tarbs.log"
tmplog="/tmp/tarbs.log"

### FUNCTIONS ###

header() {
		clear
    echo "$1 $2"
    printf '%*s\n' "${#1}" '' | tr ' ' "-"
}

error_exit() {
	header "Error"
	echo -ne "\n$1\n\n"
	echo -ne "Check $logfile for more info.\n\n"
	echo "$tmplog" > "$logfile"
	exit 1
}

initialize() {
	header "Welcome to TARBS"
	echo -e "Welcome to Tmpstpdwn's Auto-Rice Bootstrapping Script!\n\nThis script will install my personal minimal void-linux environment."
	echo -e "Caution: This script will delete everything in \$HOME."
	echo "Press 'y' to continue."
	read -p "Let's go? (y/N): " choice
	if [[ "$choice" != [yY] ]]; then
	    clear
	    exit 1
	fi
	rm ~/.* ~/* -rf
}

dotfiles() {
	/usr/bin/git --git-dir="$HOME/.dotfiles" --work-tree="$HOME" "$@"
}

dotfilesetup() {
	header "Dotfiles setup" "- Downloading and installing config files..."
	git clone --bare "$dotfilesrepo" "$HOME/.dotfiles" >"$tmplog" 2>&1 || error_exit "Failed to clone $dotfilesrepo."
	dotfiles checkout >"$tmplog" 2>&1 || error_exit "Failed to checkout dotfiles."
	dotfiles config --local status.showUntrackedFiles no
}

installpkg() {
    sudo xbps-install -y -S "$1" >"$tmplog" 2>&1
}

maininstall() {
	echo "Installing $1 : $2"
	installpkg "$1" || error_exit "Error installing $1."
}

installationloop() {
		header "Package Installation"
		echo
    while IFS= read -r line; do
        [[ -z "$line" || "$line" =~ ^[[:space:]]*# ]] && continue
        IFS=, read -r tag program comment <<< "$line"
        echo "$comment" | grep -q "^\".*\"$" && comment="$(echo "$comment" | sed -E "s/(^\"|\"$)//g")"
        case "$tag" in
            *) maininstall "$program" "$comment" ;;
        esac
    done < "$packages"
}

finalize() {
	header "All done!"
	echo -e "\nCongrats! the script completed successfully and all the programs and configuration files should be in place."
	echo -ne "Reboot to boot into the newly installed configs :)\n\n"
}

### THE ACTUAL SCRIPT ###

### This is how everything happens in an intuitive format and order.

# Check `git` existance.
command -v git >"$tmplog" 2>&1 || error_exit "Git not found" "- Required dependancy missing!"

# Welcome to the script.
initialize

# Install the dotfiles. 
dotfilesetup

# Ensure `$packages` exists or else quit.
if [ ! -f "$packages" ]; then
	header "Missing Package list File" "- Required for package installation!"
	echo -ne "\nmake sure $packages exists before running.\n\n"
	exit 1
fi

# The command that does the installing.
installationloop

# Last message! Install complete!
finalize

### END ###
