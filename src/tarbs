#!/bin/bash

# Tmpstpdwn's Auto Rice Bootstrapping Script (TARBS)
# by Tmpstpdwn <tmpstpdwn@tuta.io>
# License: GNU GPLv3

### VARIABLES ###

dotfilesrepo="https://github.com/tmpstpdwn/.dotfiles.git"
packages="$HOME/.packages"
logfile="$HOME/tarbs.log"
tmplog="/tmp/tarbs.log"
requiredcmds=(git xbps-install)

### FUNCTIONS ###

header() {
	clear
	echo "$1 $2"
	printf '%*s\n' "${#1}" '' | tr ' ' "-"
}

error_exit() {
	header "Error"
	echo -ne "\n$1\n\n"
	echo -ne "Check $logfile for more info.\n\n"
	cp "$tmplog" "$logfile"
	exit 1
}

depcmnds() {
	for cmd in "${requiredcmds[@]}"; do
		if ! command -v "$cmd" >/dev/null 2>&1; then
			echo "Missing dependency: $cmd" >> "$tmplog"
			error_exit "$cmd not found - Required dependency missing!"
		fi
	done
}

initialize() {
	header "Welcome to TARBS"
	echo -e "\nWelcome to Tmpstpdwn's Auto-Rice Bootstrapping Script!."
	echo -e "Caution: This script will delete everything in $HOME."
	echo -e "\nPress 'y' to continue."
	read -r -p "Let's go? (y/N): " choice
	if [[ "$choice" != [yY] ]]; then
		echo -ne "\nAborting...\n\n"
		exit 1
	fi
	rm -rf "$HOME"/.[!.]* "$HOME"/..?* "$HOME"/* 2> "$tmplog" || error_exit "Failed to clear $HOME."
}

dotfiles() {
	git --git-dir="$HOME/.dotfiles" --work-tree="$HOME" "$@"
}

dotfilesetup() {
	header "Dotfiles setup" "- Downloading and installing config files..."
	git clone --bare "$dotfilesrepo" "$HOME/.dotfiles" 2> "$tmplog" || error_exit "Failed to clone $dotfilesrepo."
	dotfiles checkout 2> "$tmplog" || error_exit "Failed to checkout dotfiles."
	dotfiles config --local status.showUntrackedFiles no
}

depfiles() {
	if [ ! -f "$packages" ]; then
		echo "$packages file missing!" > "$tmplog"
		error_exit "Missing Package list File - Required for package installation!"
	fi
}

voidinstall() {
	echo
	echo "Installing $1."
	sleep 1
	sudo xbps-install -y "$1" 2> "$tmplog"
	if [ $? -ne 0 ]; then
		error_exit "Failed to install $1."
	fi
}

updaterepos() {
	sudo xbps-install -Sy 2> "$tmplog"
}

installationloop() {
	header "Package Installation"
	updaterepos || error_exit "Failed to update repos."
	while IFS= read -r line; do
		[[ -z "$line" || "$line" =~ ^[[:space:]]*# ]] && continue
		IFS=, read -r tag program <<< "$line"
		case "$tag" in
			V) voidinstall "$program" ;;
		esac
	done < "$packages"
}

finalize() {
	header "All done!"
	echo -e "\nCongrats! the script completed successfully and all the programs and configuration files should be in place."
	echo -ne "Reboot to boot into the newly installed configs :)\n\n"
}

### THE ACTUAL SCRIPT ###

# Check for privileges.
if [ "$(id -u)" -eq 0 ]; then
	echo "Do NOT run this script as root! Please run as a regular user."
	exit 1
fi

if ! sudo -v; then
	echo "$USER lacks sudo privileges!"
	exit 1
fi

# Start sudo loop.
( while true; do sudo -v; sleep 60; done ) &
keep_sudo_pid=$!
trap 'kill "$keep_sudo_pid"' EXIT

# GO $HOME.
cd "$HOME"

# Check for dependant commands.
depcmnds

# Welcome to the script.
initialize

# Install the dotfiles. 
dotfilesetup

# Check for dependant files.
depfiles

# Package installations.
installationloop

# Last message! Install complete!
finalize

### END ###
